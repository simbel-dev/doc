/*================== Colors ==================*/

/* Source: http://thesassway.com/advanced/how-to-programtically-go-from-one-color-to-another-in-sass */
@function color-diff($a, $b) {
	$sat: saturation($a) - saturation($b);
	$lig:  lightness($a) -  lightness($b);
	$fn-sat: if($sat > 0, 'desaturate', 'saturate');
	$fn-lig: if($lig > 0, 'darken', 'lighten');
	
	@return (
	adjust-hue: -(hue($a) - hue($b)),
	unquote('#{$fn-sat}'): abs($sat),
	unquote('#{$fn-lig}'): abs($lig)
	);
}
 
// Apply differences returned from `color-diff` function to a color
// In order to retrieve the second color
// --------------------------------------------------------------------------------
// @param (color) $color: color to transform
// @param (map) $diff: diff map
// --------------------------------------------------------------------------------
// @return (color) transformed color
 
@function apply-diff($color, $diff) {
	// We call the $key (function), 
	// passing the $color and the $value as parameters
	// e.g. `call(get-function(adjust-hue), #BADA55, 42)`
	@each $key, $value in $diff {
	$color: call(get-function($key), $color, $value)
	}
	@return $color;
}

/*================= Vendor prefixes =================*/

@mixin box-shadow($none: none, $inset: null, $offset-x: null, $offset-y: null, $blur-radius: null, $spread-radius: null, $color: null, $opacity: null) {
	@if ($none == none) {
		.no-boxshadow & {
			border-bottom: none;
			border-left: none;
			border-right: none;
		}
		-webkit-box-shadow: none;
		-moz-box-shadow: none;
		box-shadow: none;
	}
	@else {
		zoom: 1;
		.no-boxshadow & {
			border-bottom: $spread-radius solid $color;
			border-left: $spread-radius solid $color;
			border-right: $spread-radius solid $color;
		}

		-webkit-box-shadow: $inset $offset-x $offset-y $blur-radius $spread-radius rgba($color, $opacity);
		-moz-box-shadow: $inset $offset-x $offset-y $blur-radius $spread-radius rgba($color, $opacity);
		box-shadow: $inset $offset-x $offset-y $blur-radius $spread-radius rgba($color, $opacity);
	}
}

@mixin placeholder($color, $font-family, $font-size, $font-style, $font-weight, $opacity) {
	&::-webkit-input-placeholder { /* Chrome/Opera/Safari */
		color: $color;
		font-family: $font-family;
		font-size: $font-size;
		font-style: $font-style;
		font-weight: $font-weight;
		opacity: $opacity;
	}

	&::-moz-placeholder { /* Firefox 19+ */
		color: $color;
		font-family: $font-family;
		font-size: $font-size;
		font-style: $font-style;
		font-weight: $font-weight;
		opacity: $opacity;
	}

	&:-ms-input-placeholder { /* IE 10+ */
		color: $color;
		font-family: $font-family;
		font-size: $font-size;
		font-style: $font-style;
		font-weight: $font-weight;
		opacity: $opacity;
	}

	&:-moz-placeholder { /* Firefox 18- */
		color: $color;
		font-family: $font-family;
		font-size: $font-size;
		font-style: $font-style;
		font-weight: $font-weight;
		opacity: $opacity;
	}
}

@mixin box-sizing($value) {
	-webkit-box-sizing: $value; // Safari <= 5
	-moz-box-sizing: $value; // Firefox <= 19
	box-sizing: $value;
}

@mixin calc($property, $value) {
	#{$property}: -webkit-calc(#{$value});
	#{$property}: -moz-calc(#{$value});
	#{$property}: calc(#{$value});
}

@mixin direction($value) {
	@if ($value == column) {
		-webkit-box-orient: vertical;
	}
	@else {
		-webkit-box-orient: horizontal;
	}
			
	-webkit-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin display($value) {
	@if ($value == flex) {
		-ms-box-orient: horizontal;
		display: -webkit-box;
		display: -moz-box;

		.no-flexbox & {
			display: block;
		}
	}

	display: -ms-#{$value};
	display: -moz-#{$value};
	display: -webkit-#{$value};
	display: $value;
}

@mixin flex-basis($value) {
	-webkit-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;

	@if ($value != 0) {
		.no-flexbox & {
			max-width: $value;
			width: $value;
		}

		@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
			/* IE10+ */
			max-width: $value;
		}
	}
}

@mixin flex-grow($value: 0) {
	-webkit-flex-grow: $value;
	-ms-flex-grow: $value;
	flex-grow: $value;
}

@mixin flex-shrink($value: 1) {
	-webkit-flex-shrink: $value;
	-ms-flex-shrink: $value;
	flex-shrink: $value;
}

@mixin flex-wrap($value) {
	-webkit-flex-wrap: $value;
	-ms-flex-wrap: $value;
	flex-wrap: $value;
}

@mixin justify-content($value) {
	-webkit-box-pack: $value;
	@if (($value == start) or ($value == end)) {
		-webkit-justify-content: flex-#{$value};
	}
	@else {
		-webkit-justify-content: $value;
	}
	-ms-flex-pack: $value;
	@if (($value == start) or ($value == end)) {
		justify-content: flex-#{$value};
	}
	@else {
		justify-content: $value;
	}
}

@mixin align-items($value: stretch) {
	-webkit-align-items: $value;
	-ms-align-items: $value;
	align-items: $value;
}

@mixin align-self($value) {
	-webkit-align-self: $value;
	-moz-align-self: $value;
	-ms-align-self: $value;
	align-self: $value;
}

/* Source: https://codepen.io/sawmac/pen/cayhK */

@mixin transition($transition...) {
	-moz-transition: $transition;
	-o-transition: $transition;
	-webkit-transition: $transition;
	transition: $transition;
}

@mixin transition-property($property...) {
	-moz-transition-property: $property;
	-o-transition-property: $property;
	-webkit-transition-property: $property;
	transition-property: $property;
}

@mixin transition-duration($duration...) {
	-moz-transition-property: $duration;
	-o-transition-property: $duration;
	-webkit-transition-property: $duration;
	transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
	-moz-transition-timing-function: $timing;
	-o-transition-timing-function: $timing;
	-webkit-transition-timing-function: $timing;
	transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
	-moz-transition-delay: $delay;
	-o-transition-delay: $delay;
	-webkit-transition-delay: $delay;
	transition-delay: $delay;
}

@mixin linear-gradient($start, $end, $start-color, $end-color, $orientation, $angle: 0) {
	background: $start-color;
	@if $orientation == 'vertical' {
		background: -moz-linear-gradient(top, $start-color $start, $end-color $end);
		background: -webkit-gradient(linear, center top, center bottom, color-stop($start, $start-color), color-stop($end, $end-color));
		background: -webkit-linear-gradient(top, $start-color $start, $end-color $end);
		background: -o-linear-gradient(top, $start-color $start, $end-color $end);
		background: -ms-linear-gradient(top, $start-color $start, $end-color $end);
		background: linear-gradient(to bottom, $start-color $start, $end-color $end);
		.no-cssgradients & {
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr= '#{$start-color}', endColorstr='#{$end-color}', GradientType=0 ); /* IE6-9 */
		}
		-ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=0, startColorstr=#{$start-color}, endColorstr=#{$end-color})";
	}
	@else if $orientation == 'horizontal' {
		background: -moz-linear-gradient(left, $start-color $start, $end-color $end);
		background: -webkit-gradient(linear, left center, right center, color-stop($start, $start-color), color-stop($end, $end-color));
		background: -webkit-linear-gradient(left, $start-color $start, $end-color $end);
		background: -o-linear-gradient(left, $start-color $start, $end-color $end);
		background: -ms-linear-gradient(left, $start-color $start, $end-color $end);
		background: linear-gradient(to right, $start-color $start, $end-color $end);
		.no-cssgradients & {
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start-color}', endColorstr='#{$end-color}', GradientType=1 ); /* IE6-9 */
		}
		-ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=1, startColorstr=#{$start-color}, endColorstr=#{$end-color})";
	}
	@else if $orientation == 'diagonal' {
		background: -moz-linear-gradient(#{90 -$angle}deg, $start-color $start, $end-color $end);
		background: -webkit-gradient(left top, right bottom, color-stop($start, $start-color), color-stop($end, $end-color));
		background: -webkit-linear-gradient(#{90 -$angle}deg, $start-color $start, $end-color $end);
		background: -o-linear-gradient(#{90 -$angle}deg, $start-color $start, $end-color $end);
		background: -ms-linear-gradient(#{90 -$angle}deg, $start-color $start, $end-color $end);
		background: linear-gradient(#{$angle}deg, $start-color $start, $end-color $end);
		.no-cssgradients & {
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start-color}', endColorstr='#{$end-color}', GradientType=1 );
		}
		-ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=1, startColorstr=#{$start-color}, endColorstr=#{$end-color})";
	}
}

@mixin radial-gradient($start, $end, $start-color, $end-color, $position:center, $extent-keyword:farthest-corner, $shape:ellipse) {
	background: $start-color; /* Old browsers */
	@if $extent-keyword == farthest-corner {
		background: -moz-radial-gradient($position, $shape cover, $start-color $start, $end-color $end); /* FF3.6+ */
		background: -webkit-gradient(radial, $position, 0px, $position, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color));/* Chrome, Safari4+ */
		background: -webkit-radial-gradient($position, $shape cover, $start-color 0%, $end-color 100%); /* Chrome10+,Safari5.1+ */
		background: -o-radial-gradient($position, $shape cover, $start-color $start, $end-color $end); /* Opera 11.10+ */
		background: -ms-radial-gradient($position, $shape cover, $start-color $start, $end-color $end); /* IE 10+ */
		background: radial-gradient($shape $extent-keyword at $position, $start-color $start, $end-color $end);/* W3C */
	}
	@else if $extent-keyword == closest-side {
		background: -moz-radial-gradient($position, $shape contain, $start-color $start, $end-color $end); /* FF3.6+ */
		background: -webkit-gradient(radial, $position, 0px, $position, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color));/* Chrome, Safari4+ */
		background: -webkit-radial-gradient($position, $shape contain, $start-color 0%, $end-color 100%); /* Chrome10+,Safari5.1+ */
		background: -o-radial-gradient($position, $shape contain, $start-color $start, $end-color $end); /* Opera 11.10+ */
		background: -ms-radial-gradient($position, $shape contain, $start-color $start, $end-color $end); /* IE 10+ */
		background: radial-gradient($shape $extent-keyword at $position, $start-color $start, $end-color $end);/* W3C */
	}
	@else {
		background: -moz-radial-gradient($position, $shape $extent-keyword, $start-color $start, $end-color $end); /* FF3.6+ */
		background: -webkit-gradient(radial, $position, 0px, $position, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color));/* Chrome, Safari4+ */
		background: -webkit-radial-gradient($position, $shape $extent-keyword, $start-color 0%, $end-color 100%); /* Chrome10+,Safari5.1+ */
		background: -o-radial-gradient($position, $shape, $start-color $start, $end-color $end); /* Opera 11.10+ */
		background: -ms-radial-gradient($position, $shape, $start-color $start, $end-color $end); /* IE 10+ */
		background: radial-gradient($shape $extent-keyword at $position, $start-color $start, $end-color $end);/* W3C */
	}

	.no-cssgradients & {
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start-color}', endColorstr='#{$end-color}', GradientType=1 ); /* IE6-9 */
	}
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient (GradientType=1, startColorstr=#{$start-color}, endColorstr=#{$end-color})";
}